server_uri: bolt://localhost:7687
admin_user: neo4j
admin_pass: cuneyt123

mod: sync
thread_count: 8

files:
  - url: /home/cnytync/Dev/dbpedia/categories_lang=en_articles.ttl.bz2
    compression: zip
    type: ttl
    chunk_size: 100
    cql: |
      WITH $dict.rows as rows UNWIND rows as row
        MERGE(subject:Entity {wikidata_id: row.id})
        SET  subject.short_description = row.descriptions["en"].value
        WITH keys(row.claims) as keys, row, subject
          UNWIND keys as key
           UNWIND row.claims[key] as claim
            CALL apoc.do.when(claim.mainsnak.datavalue.type = 'wikibase-entityid' AND claim.mainsnak.datavalue.value.id IS NOT NULL, '
                MERGE(object:Entity {wikidata_id: claim.mainsnak.datavalue.value.id})
                WITH subject, key, claim, object
                    CALL apoc.create.relationship(subject, "https://www.wikidata.org/wiki/Property:" + key, {source:"wikidata", type:"uri"}, object) YIELD rel
                    RETURN null', '
                WITH subject, key, claim
                    MERGE(mp:MetaProperty {uri: "https://www.wikidata.org/wiki/Property:" + key, source: "wikidata"}) 
                    WITH * CALL apoc.do.case([claim.mainsnak.datavalue.type IS NOT NULL AND claim.mainsnak.datavalue.type="string","CREATE(object:Property {wikidata_id: key,datatype: claim.mainsnak.datatype, value: claim.mainsnak.datavalue.value, type: claim.mainsnak.datavalue.type,rank: claim.mainsnak.rank}) RETURN object",
                                   claim.mainsnak.datavalue.type IS NOT NULL AND claim.mainsnak.datavalue.type="globecoordinate","CREATE(object:Property {wikidata_id: key, datatype: claim.mainsnak.datatype, latitude: claim.mainsnak.datavalue.value.latitude, longitude: claim.mainsnak.datavalue.value.longitude, altitude: claim.mainsnak.datavalue.value.altitude, precision: claim.mainsnak.datavalue.value.precision, globe: claim.mainsnak.datavalue.value.globe, type: claim.mainsnak.datavalue.type,rank: claim.mainsnak.rank}) RETURN object",
                                   claim.mainsnak.datavalue.type IS NOT NULL AND claim.mainsnak.datavalue.type="quantity","CREATE(object:Property {wikidata_id: key, datatype: claim.mainsnak.datatype, amount: claim.mainsnak.datavalue.value.amount, upperBound: claim.mainsnak.datavalue.value.upperBound, lowerBound: claim.mainsnak.datavalue.value.lowerBound, unit: claim.mainsnak.datavalue.value.unit, type: claim.mainsnak.datavalue.type,rank: claim.mainsnak.rank}) RETURN object",
                                   claim.mainsnak.datavalue.type IS NOT NULL AND claim.mainsnak.datavalue.type="time","CREATE(object:Property {wikidata_id: key, datatype: claim.mainsnak.datatype, time: claim.mainsnak.datavalue.value.time, timezone: claim.mainsnak.datavalue.value.timezone, before: claim.mainsnak.datavalue.value.before, after: claim.mainsnak.datavalue.value.after, precision: claim.mainsnak.datavalue.value.precision, calendarmodel: claim.mainsnak.datavalue.value.calendarmodel, type: claim.mainsnak.datavalue.type,rank: claim.mainsnak.rank}) RETURN object"],"RETURN null",{claim:claim,subject:subject,key:key}) YIELD value as object
                    
                    CREATE (object.object)-[property_meta_property]->(mp)
                    
                    WITH subject, key, object WHERE object.object IS NOT NULL
                        CALL apoc.create.relationship(subject, "https://www.wikidata.org/wiki/Property:" + key, {source:"wikidata", type:"literal"}, object.object) YIELD rel
                        RETURN null
                    ', {claim:claim,subject:subject,key:key}) YIELD value
            RETURN null
